generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model article {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String          @db.VarChar(255)
  content       String
  sector        String          @db.VarChar(255)
  publisher_id  String          @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  publisher     publisher       @relation(fields: [publisher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  saved_article saved_article[]
}

model publisher {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  image       String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  article     article[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model saved_article {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id    String     @db.Uuid
  subscriber_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  article       article    @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriber    subscriber @relation(fields: [subscriber_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscriber {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String          @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  saved_article saved_article[]
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  publisher   publisher[]
  subscriber  subscriber[]
}
